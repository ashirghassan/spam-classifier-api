# Step 5.7.5: Corrected .gitlab-ci.yml (Combined Build and Push)
# CI/CD Pipeline for Spam Classifier Docker Image

# Define the stages of the CI/CD pipeline
stages:
  # We can keep stages but put build and push in one job, likely in the deploy stage
  # Or simplify to just one stage if no other steps are needed between build/push
  # Let's keep 'deploy' as the stage name for the combined job
  - deploy
  # Optional: Add a 'test' stage before deploy if you had automated tests
  # - test

# Define variables
variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  IMAGE_TAG: $CI_COMMIT_SHA

# --- Combined Build and Push Job ---
build_and_push_docker:
  stage: deploy # Place this job in the deploy stage
  image: docker:latest # Use the latest Docker image as the runner environment
  services: # Need Docker-in-Docker for build and push commands
    - docker:dind
  before_script:
    - echo "Logging into Gitlab Container Registry..."
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script: # The main commands for this job - Build THEN Push
    - echo "Building Docker image with tag $IMAGE_TAG..."
    # Build the Docker image. Tag it with the full registry path and commit SHA.
    # This makes the image immediately available for push by its full name.
    - docker build -t "$IMAGE_NAME":"$IMAGE_TAG" .
    # Optional: Tag with 'latest'
    - docker tag "$IMAGE_NAME":"$IMAGE_TAG" "$IMAGE_NAME":latest
    - echo "Docker image built successfully."

    - echo "Pushing Docker image with tag $IMAGE_TAG to registry..."
    # Push the image using its full name and tag
    - docker push "$IMAGE_NAME":"$IMAGE_TAG"
    # Optional: Push the 'latest' tag
    - docker push "$IMAGE_NAME":latest
    - echo "Docker image pushed successfully."
  only: # This job will only run for pushes to the 'main' branch
    - main
  # Optional: Add artifacts if needed
  # artifacts:
  #   paths:
  #     - build_log.txt # Example if you log build output to a file